<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>视频监控</title>
      <link href="/2021/10/30/video-monitor/"/>
      <url>/2021/10/30/video-monitor/</url>
      
        <content type="html"><![CDATA[<h1 id="视频监控"><a href="#视频监控" class="headerlink" title="视频监控"></a>视频监控</h1><p>学习韦东山老师的视频监控项目笔记。</p><h2 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h2><ul><li>家居<ul><li>家庭安防</li><li>照看老人小孩</li><li>照看宠物</li></ul></li><li>公司<ul><li>仓库防火防盗</li><li>疫情监控（红外测温，人脸识别）</li></ul></li><li>农业<ul><li>大鹏记录</li><li>研究记录</li></ul></li><li>娱乐<ul><li>运动拍摄</li><li>风景拍摄</li></ul></li><li>社会<ul><li>交通监控</li><li>安保</li></ul></li></ul><h2 id="2-视频监控方案"><a href="#2-视频监控方案" class="headerlink" title="2. 视频监控方案"></a>2. 视频监控方案</h2><p>实验测试使用的硬件：</p><p>硬件：arm板子imx6ull</p><p>摄像头：V4L2 USB免驱</p><h3 id="2-1-MJPG-Streamer"><a href="#2-1-MJPG-Streamer" class="headerlink" title="2.1 MJPG-Streamer"></a>2.1 MJPG-Streamer</h3><h4 id="2-1-1-介绍"><a href="#2-1-1-介绍" class="headerlink" title="2.1.1 介绍"></a>2.1.1 介绍</h4><p><img src="MJPG_plan.png"> </p><p><img src="MJPG_plan2.png"> </p><p>局域网方案，需要实现两个程序。</p><p>程序1，需要实现数据的获取，然后等待其它网络连接，如果有设备连接上网络，则把摄像头数据发送过去。</p><p>程序2，连接网络获取数据，然后显示获取的数据。</p><ul><li><p>优点</p><p>程序简单，所有源码一目了然，便于学习。</p><p>对于ARM板子性能要求不高，主频200MHZ的ARM芯片也能实现。</p></li><li><p>缺点</p><p>只能实现局域网内的视频监控，要实现互联网视频监控，需要另外实现内网穿透</p><p>mjpg-streamer没有实现声音传输</p><p>mjpg-streamer项目已经不在维护，仅建议用于学习</p></li></ul><h3 id="2-1-2-JPEG和MJPG格式简介"><a href="#2-1-2-JPEG和MJPG格式简介" class="headerlink" title="2.1.2 JPEG和MJPG格式简介"></a>2.1.2 JPEG和MJPG格式简介</h3><ul><li><p>JPEG</p><ul><li>简称JPG</li><li>一个象素的颜色可以用RGB三原色来表示，起始还可以用YUV格式来表示</li><li>使用RGB、YUV格式编码的照片，文件都很大，比如常见的BMP文件就是用RGB编码</li><li>把一个BMP文件转化未JPEG文件，可以发现图片质量没有发生变化，但是文件变小了许多</li><li>JPEG式根据人体视觉的特点采用YCbCr格式，大大压缩了照片的大小</li></ul></li><li><p>MJPG</p><ul><li><p>Motion JPEG,简称MJPG</p></li><li><p>JPEG是静态图片的编码方式，MJPG是动态的视频编码格式</p></li><li><p>可以简单理解：MJPG就是把多个JPEG图片连续显示出来</p><p>MJPG优点：</p><ul><li>很多摄像头本省就支持JPEG、MJPG，所以处理器不需要做太多处理</li><li>一般的低性能处理器就可以传输MJPG视频流</li></ul><p>MJPG缺点：</p><ul><li>MJPG只是多个JPEG图片的组合，它不考虑前后两帧数据的变化，总是传输一帧帧图像：传输带宽要求高</li><li>H264等视频格式，会考虑前后两帧数据的变化，只传输变化的数据：传输宽带要求低</li></ul></li></ul></li></ul><h4 id="2-1-3-MJPG-Streamer具体实现方式"><a href="#2-1-3-MJPG-Streamer具体实现方式" class="headerlink" title="2.1.3 MJPG-Streamer具体实现方式"></a>2.1.3 MJPG-Streamer具体实现方式</h4><p>在buildroot根目录下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">make menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现图像化页面之后，使用“/”搜索MJPG</p><p><img src="MJPG_Search.jpg"> </p><p><img src="MJPG_info.jpg"> </p><p>可以知道添加路径</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Target packages    --&gt;&gt; Networking application    --&gt;&gt; mjpg-streamer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="MJPG_config.jpg"> </p><p>选择之后，保存退出，在Buildroot根目录位置执行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是会在Buildroot的 <em><strong>dl/mjpg-streamer</strong></em> 目录下自动下载源码，并编译</p><p>结果保存在 <em><strong>output/images</strong></em> 目录下，这里测试使用网络文件系统挂载，找到rootfs.tar，然后解压到网络文件系统挂载的位置即可。</p><p>重启开发板系统，并接上摄像头，在开发板上查询设备：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#ls /dev/video*/dev/video0  /dev/video1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我这里接上后摄像头之后新增的设备是： <strong>/dev/video1</strong> </p><p>查看开发板IP地址：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#ifconfigeth0      Link encap:Ethernet  HWaddr 00:04:9F:04:D2:35          inet addr:192.168.50.149  Bcast:192.168.50.255  Mask:255.255.255.0          inet6 addr: fe80::204:9fff:fe04:d235/64 Scope:Link          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:6884 errors:0 dropped:0 overruns:0 frame:0          TX packets:3374 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000          RX bytes:7243467 (6.9 MiB)  TX bytes:538184 (525.5 KiB)lo        Link encap:Local Loopback          inet addr:127.0.0.1  Mask:255.0.0.0          inet6 addr: ::1/128 Scope:Host          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:1 errors:0 dropped:0 overruns:0 frame:0          TX packets:1 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0          RX bytes:148 (148.0 B)  TX bytes:148 (148.0 B)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询到的IP地址是：<em><strong>192.168.50.149</strong></em> </p><p>在开发板上安装好MJPG之后，执行命令：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">mjpg_streamer -i "/usr/lib/mjpg-streamer/input_uvc.so -d /dev/video1 -f 30 -q 90 -n" -o "/usr/lib/mjpg-streamer/output_http.so -w /usr/share/mjpg-streamer/www"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报错，则说明设备不对，在换用 video0</p><p>在本地游览器输入开发板地址查看摄像头数据：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">192.168.50.149:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="MJPG_picture.jpg"> </p><p>至此，实验成功。</p><h4 id="2-1-4-框架分析"><a href="#2-1-4-框架分析" class="headerlink" title="2.1.4 框架分析"></a>2.1.4 框架分析</h4><p><img src="MJPG_kuangjia.png">  </p><p>查看帮助：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">mjpg_streamer -o “/usr/lib/mjpg-streamer/output_file.so  --help”mjpg_streamer -i "/usr/lib/mjpg-streamer/input_file.so --help"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把摄像头数据存储为JPG文件：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">mjpg_streamer -i "/usr/lib/mjpg-streamer/input_uvc.so -d /dev/video1 -f 30 -q 90 -n" -o "/usr/lib/mjpg-streamer/output_file.so -f /tmp"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把JPG文件输出到游览器：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">mjpg_streamer -i "/usr/lib/mjpg-streamer/input_file.so -e -f /tmp" -o "/usr/lib/mjpg-streamer/output_http.so -w /usr/share/mjpg-streamer/www"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-FFmpeg"><a href="#2-2-FFmpeg" class="headerlink" title="2.2 FFmpeg"></a>2.2 FFmpeg</h3><h3 id="2-2-1-介绍"><a href="#2-2-1-介绍" class="headerlink" title="2.2.1 介绍"></a>2.2.1 介绍</h3><ul><li>FFmpeg是什么？<ul><li>一套开源软件</li><li>可以记录、转换音视频：可以从摄像头中记录视频，从声卡中记录音频，可以转化为各种格式保存起来</li><li>可以把各种格式的音视频转化为流：供在线观看</li><li>其它功能：视频截图、加水印、裁剪等</li><li>Mplayer，ffplay，射手播放器，暴风影音，KMPlayer，QQ影音等视频频播放器的内核就是 FFmpeg</li><li>格式工厂的内核也是FFmpeg</li></ul></li><li>简易理解</li></ul><p><img src="ffmpeg_stand1.jpg"> </p><ul><li><p>误区：我们以为mp4格式就代表了音频、视频的压缩格式，其实不是</p><ul><li>mp4只是一种封装格式</li><li>MP4里面有音频数据、视频数据</li><li>音频数据有自己的压缩格式，还不止一种</li><li>视频格式有自己的压缩格式，还不止一种</li></ul></li><li><p>从摄像头得到的原始数据太大，不易传输，需要压缩</p><ul><li>压缩的方法有很多种：格式不同，编码器不同，这里对应视频编码器</li></ul></li><li><p>从声卡得到的原始数据太大，不易传输，需要压缩</p><ul><li>压缩的方法有很多种：格式不同，编码器不同，这里对应音频编码器</li></ul></li><li><p>把这些文件压缩之后，及编码后的音频数据和视频数据合并到一起：复用MUX，就得到了MP4等文件</p></li></ul><p><img src="ffmpeg_video1.png"> </p><p><img src="MJPG_video22.png"> </p><p><img src="MJPG_video3.png"> </p><ul><li>ffmpeg的组成</li></ul><p><img src="ffmpeg_user1.jpg"> </p><ul><li><p>ffmpeg的重要概念</p><p><img src="ffmpg_user2.jpg"> </p></li><li><p>ffmpeg处理音视频的过程</p><p><img src="ffmpg_user333.jpg.png"></p></li><li><p>ffmpeg常用参数</p><p><img src="ffmpg_user4.jpg"> </p></li></ul><p>参考文章</p><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/18893769">https://blog.csdn.net/leixiaohua1020/article/details/18893769</a></p><p><a href="https://www.jianshu.com/p/3c8c4a892f3c">https://www.jianshu.com/p/3c8c4a892f3c</a></p><p> <a href="https://zhuanlan.zhihu.com/p/67878761">https://zhuanlan.zhihu.com/p/67878761</a></p><h3 id="2-2-2-流媒体协议"><a href="#2-2-2-流媒体协议" class="headerlink" title="2.2.2 流媒体协议"></a>2.2.2 流媒体协议</h3><p>上述方案的实现，会涉及到数据的传输协议，常用的流媒体传输协议如下：</p><table><thead><tr><th>流媒体协议</th><th>HTTPFLV</th><th>RTMP</th><th>HLS</th><th>DASH</th></tr></thead><tbody><tr><td>传输方式</td><td>http</td><td>tcp</td><td>http</td><td>http</td></tr><tr><td>封装格式</td><td>flv</td><td>flv tag</td><td>TS 文件</td><td>Mp4 3gp webm</td></tr><tr><td>延时</td><td>低</td><td>低</td><td>高</td><td>高</td></tr><tr><td>数据分段</td><td>连续流</td><td>连续流</td><td>切片文件</td><td>切片文件</td></tr><tr><td>HTML5</td><td>使用flv.js</td><td>不支持</td><td>使用hls.js</td><td>可播放mp4,webm</td></tr></tbody></table><p><img src="medium.png"> </p><p>注意：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">RTMP 可以用在双端HTTPFLV、HLS只能用在拉流端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考文章：</p><p><a href="https://www.notion.so/2b85beec8d084a1d9fc0e447dd44397a#0e928ca3004c4d00bcfa0694626999c1">https://www.notion.so/2b85beec8d084a1d9fc0e447dd44397a#0e928ca3004c4d00bcfa0694626999c1</a></p><p><a href="https://www.jianshu.com/p/32417d8ee5b6">https://www.jianshu.com/p/32417d8ee5b6</a></p><h3 id="2-2-3-ffmpeg具体实现方式"><a href="#2-2-3-ffmpeg具体实现方式" class="headerlink" title="2.2.3 ffmpeg具体实现方式"></a>2.2.3 ffmpeg具体实现方式</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><img src="ffmpeg_server.png"> </p><p><img src="ffmpeg_server2.png"> </p><p>需要实现三个程序：</p><p>程序1：获取摄像头数据，以及实现一个推送程序：一边读取摄像头数据，一边把数据推送给服务器。</p><p>程序2：接收ARM板子发来的数据，并把数据格式转换后发送给手机客户端。</p><p>程序3：从服务器上拉取数据，并显示出来。</p><p>上面程序实现采用开源程序：</p><ul><li>程序1：ffmpeg</li><li>程序2：nginx</li><li>程序3：VLC游览器或者web游览器</li></ul><p>本次实验将简化操作，将Nginx安装到开发板上。</p><p>在buildroot的根目录下，执行：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">make menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用“/”搜索ffmpeg</p><p><img src="ffmpeg_buildroot1.jpg"> </p><p><img src="ffmpeg_buildroot2.jpg"> </p><p>根据查询结果，可以知道添加路径：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Target packages    --&gt;&gt; Audio and video applications    --&gt;&gt; ffmpeg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="ffmpeg_buildroot3.jpg"> </p><p><img src="ffmpeg_buildroot4.jpg"> </p><p>建议全选，保存退出，在Buildroot根目录位置执行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是会在Buildroot的 <em><strong>dl/ffmpeg</strong></em> 目录下自动下载源码，并编译。</p><p>结果保存在 <em><strong>output/images</strong></em> 目录下，这里测试使用网络文件系统挂载，找到 rootfs.tar，然后解压到网络文件系统挂载的位置即可。</p><p>重启开发板系统，确认接上后摄像头之后的设备和开发板IP地址。比如，我这里的摄像头设备是 <strong>/dev/video1</strong>  ，开发板IP是：<strong>192.168.50.149</strong> </p><p>开发板安装好ffmpeg后，执行命令：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ffmpeg -f v4l2 -framerate 10 -i /dev/video0 -q 10  my.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时，会把摄像头的数据录制为my.mp4</p><p>通过播放器可以打开。</p><h3 id="2-3-流媒体服务器"><a href="#2-3-流媒体服务器" class="headerlink" title="2.3 流媒体服务器"></a>2.3 流媒体服务器</h3><p>三种WEB服务器的比较：</p><p><img src="web_comp1.jpg">  </p><p>Nginx具体实现方式</p><p>在Buildroot根目录下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">$mkdir dl/nginx$cd dl/nginx$git clone https://github.com/winshining/nginx-http-flv-module.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>回到Buildroot根目录下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">make menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用“/”搜索nginx</p><p><img src="nginx1.jpg"> </p><p>根据查询结果，可以知道添加路径：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Target packages    --&gt;&gt; Networking application    --&gt;&gt; nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="nginx_config1.jpg"> </p><p><img src="nginx_config2.jpg"> </p><p>nginx的配置建议全选，然后增加刚才下载文件的路径</p><p>保存退出，在Buildroot根目录位置执行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是会在Buildroot的 <em><strong>dl/nginx</strong></em> 目录下自动下载源码，并编译。</p><p>结果保存在 <em><strong>output/images</strong></em> 目录下，这里测试使用网络文件系统挂载，找到 rootfs.tar，然后解压到网络文件系统挂载的位置即可。</p><p>重启开发板系统，由于Nginx原本不支持RTMP和HTTPFLV，需要修改Nginx配置文件：/etc/nginx/nginx.conf</p><p><img src="nginx_conf1.jpg"> </p><p><img src="nginx_conf2.jpg"> </p><p>添加完数据之后重启开发板：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">$/etc/init.d/S50nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询开发板IP：<strong>192.168.50.149</strong> </p><p>在内部游览器中输入：<strong>192.168.50.149</strong>  </p><p>看到Nginx的欢迎界面，说明配置Nginx成功。</p><p>我们希望实现的功能是在网页上直接显示推送的视频，所以需要修改Nginx默认网页显示的内容。</p><p>找到nginx默认网页显示内容的位置：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">/usr/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来替换原来网页默认显示的内容：</p><pre class="line-numbers language-htm" data-language="htm"><code class="language-htm">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type"&gt;    &lt;title&gt;flv.js demo&lt;/title&gt;    &lt;style&gt;        .mainContainer {            display: block;            width: 1024px;            margin-left: auto;            margin-right: auto;        }        .urlInput {            display: block;            width: 100%;            margin-left: auto;            margin-right: auto;            margin-top: 8px;            margin-bottom: 8px;        }        .centeredVideo {            display: block;            width: 100%;            height: 576px;            margin-left: auto;            margin-right: auto;            margin-bottom: auto;        }        .controls {            display: block;            width: 100%;            text-align: left;            margin-left: auto;            margin-right: auto;            margin-top: 8px;            margin-bottom: 10px;        }        .logcatBox {            border-color: #CCCCCC;            font-size: 11px;            font-family: Menlo, Consolas, monospace;            display: block;            width: 100%;            text-align: left;            margin-left: auto;            margin-right: auto;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;        &lt;div class="mainContainer"&gt;        &lt;video name="videoElement" class="centeredVideo" id="videoElement" controls width="1024" height="576" autoplay&gt;            Your browser is too old which doesn't support HTML5 video.        &lt;/video&gt;    &lt;/div&gt;    &lt;script src="https://cdn.bootcss.com/flv.js/1.5.0/flv.js"&gt;&lt;/script&gt;        &lt;script&gt;         if (flvjs.isSupported()) {            startVideo()        }        function startVideo(){            var videoElement = document.getElementById('videoElement');            var flvPlayer = flvjs.createPlayer({                type: 'flv',                isLive: true,                hasAudio: true,                hasVideo: true,                enableStashBuffer: true,                url: 'http://192.168.50.125/test?app=live&amp;stream=wei'            });            flvPlayer.attachMediaElement(videoElement);            flvPlayer.load();            flvPlayer.play();        }        videoElement.addEventListener('click', function(){            alert( '是否支持点播视频：' + flvjs.getFeatureList().mseFlvPlayback + ' 是否支持httpflv直播流：' + flvjs.getFeatureList().mseLiveFlvPlayback )        })        function destoryVideo(){            flvPlayer.pause();            flvPlayer.unload();            flvPlayer.detachMediaElement();            flvPlayer.destroy();            flvPlayer = null;        }        function reloadVideo(){            destoryVideo()            startVideo()        }    &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述内容需要注意的修改点如下：</p><p><img src="nginx_web.jpg"> </p><p>推送本地视频：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ffmpeg -re -i /4_project/lizhi.mp4 -vcodec copy -acodec copy -f flv rtmp://127.0.0.1/live/wei<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开本地游览器</p><p><img src="nginx_video.jpg"> </p><p>就可以看到推送的视频</p><p>同时也可以使用VLC播放器拉流，首先安装VLC播放器，下载地址：<a href="https://www.videolan.org/">https://www.videolan.org/</a> </p><p>使用RTMP协议拉流，在VLC播放器中点击“媒体”—&gt;”打开网络串流”，输入：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">rtmp://192.168.50.149/live/wei<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用HTTPFLV协议拉流，在VLC播放器中点击“媒体”—&gt;”打开网络串流”，输入：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">http://192.168.50.149/test?app=live&amp;stream=wei<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述推流采用推送本地视频的方式，也可以直接推送摄像头数据：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ffmpeg -f v4l2 -framerate 10 -i /dev/video1 -q 10  -f flv rtmp://127.0.0.1/live/wei<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经过测试，发现推送摄像头数据时，拉流端视频很卡顿，这是由于IMX6ULL开发板性能太弱，所以测试时采用推送本地视频的方式。</p><p>参考文章：</p><p><a href="https://blog.csdn.net/impingo/article/details/103077380">https://blog.csdn.net/impingo/article/details/103077380</a></p><p><a href="https://www.cnblogs.com/saysmy/p/7851911.html">https://www.cnblogs.com/saysmy/p/7851911.html</a></p><h2 id="3-硬件接口"><a href="#3-硬件接口" class="headerlink" title="3. 硬件接口"></a>3. 硬件接口</h2><p>参考文件：MJPG-Streamer的源码位置： <em><strong>plugins/input_uvc/v4l2uvc.c</strong></em> </p><h3 id="3-1-摄像头"><a href="#3-1-摄像头" class="headerlink" title="3.1 摄像头"></a>3.1 摄像头</h3><p>硬件接口：</p><ul><li>USB</li><li>CMOS等</li><li>都遵守相同的标准：V4L2</li><li>APP可以使用同样的API访问不同硬件接口的摄像头</li></ul><p>摄像头参数：</p><ul><li>分辨率</li><li>数据格式</li><li>RGB YUV MJPG JPJE 等</li><li>帧率</li></ul><p>摄像头API接口：</p><p><img src="monitor_api.png"> </p><h3 id="3-2-声卡"><a href="#3-2-声卡" class="headerlink" title="3.2 声卡"></a>3.2 声卡</h3><p>ffmpeg借助第三方库操作声卡</p><p>在Buildroot的根目录下，输入</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">make menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>使能alsa-lib</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Target packages<span class="token operator">-&gt;</span> Libraries<span class="token operator">-&gt;</span> Audoi<span class="token operator">/</span>Sound<span class="token operator">-&gt;</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>alsa<span class="token operator">-</span>lib  <span class="token operator">--</span><span class="token operator">&gt;</span>配置全部选中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="alsa_lib.png"> </p></li><li><p>使能alsa-utils</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Target packages<span class="token operator">-&gt;</span> Audio and video applications<span class="token operator">-&gt;</span> alsa<span class="token operator">-</span>utils   <span class="token operator">-&gt;</span><span class="token operator">&gt;</span>全部选中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="alsa_utils.png"> </p></li></ol><p>编译生成映像文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行Ffmpeg</p><p>查看声卡设备：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">$ls <span class="token operator">/</span>dev<span class="token operator">/</span>sndcontrolC0  pcmC0D0c   pcmC0D0p   pcmC0D1c   pcmC0D1p   timer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>controlC0：用于声卡控制，C0表示声卡0</p></li><li><p>pcmC0D0c：用于录音的pcm设备，其中“C0D0”表示声卡0中的设备0，最后的c是capture的缩写，表示录音</p></li><li><p>pcmC0D0p：用于播放的pcm设备，其中“C0D0”表示声卡0中的设备0，最后的p是playback的缩写，表示放音</p></li><li><p>pcmC0D1c：用于录音的pcm设备，其中“C0D1”表示声卡0中的设备1，最后的c是capture的缩写，表示录音</p></li><li><p>pcmC0D1p：用于播放的pcm设备，其中“C0D1”表示声卡0中的设备1，最后的p是playback的缩写，表示放音</p></li><li><p>timer：定时器</p></li></ul><p>只录制声音：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ffmpeg -f alsa -ac 1 -i hw:0,0 my.wav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>播放：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">aplay my.wav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试流媒体：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//推流，在开发板上执行，只推声音</span>ffmpeg <span class="token operator">-</span>f alsa <span class="token operator">-</span>ac <span class="token number">1</span> <span class="token operator">-</span>ar <span class="token number">11025</span> <span class="token operator">-</span>i hw<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token operator">-</span>acodec aac <span class="token operator">-</span>f flv rtmp<span class="token operator">:</span><span class="token comment">//127.0.0.1/live/wei</span><span class="token comment">//视频声音一起推送</span>ffmpeg <span class="token operator">-</span>f alsa <span class="token operator">-</span>ac <span class="token number">1</span> <span class="token operator">-</span>ar <span class="token number">11025</span> <span class="token operator">-</span>i hw<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token operator">-</span>acodec aac <span class="token operator">-</span>f v4l2 <span class="token operator">-</span>framerate <span class="token number">10</span> <span class="token operator">-</span>i <span class="token operator">/</span>dev<span class="token operator">/</span>video1 <span class="token operator">-</span>q <span class="token number">10</span> <span class="token operator">-</span>f flv rtmp<span class="token operator">:</span><span class="token comment">//127.0.0.1/live/wei</span><span class="token comment">//拉流</span><span class="token comment">//使用rtmp协议拉流,在VLC播放器中</span>rtmp<span class="token operator">:</span><span class="token comment">//192.168.50.149/live/wei</span><span class="token comment">//使用HTTPFLV协议拉流</span>http<span class="token operator">:</span><span class="token comment">//192.168.50.149/test?app=live&amp;stream=wei</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-内网穿透"><a href="#4-内网穿透" class="headerlink" title="4. 内网穿透"></a>4. 内网穿透</h2><p>内网穿透有两种情况：</p><ul><li>家里宽带有公网IP</li><li>家里宽带无公网IP</li></ul><p>如何判断自己是否具有公网IP呢？</p><p> 通过对比你的路由器 显示的外网IP 与 <a href="http://www.ip138.com/">www.ip138.com</a> 显示的IP, 如果是一致的，则一般就是公网IP</p><p>如我的路由器WAN口显示的外网IP为：<strong>10.0.37.240</strong> </p><p><img src="asus.jpg" alt="路由器显示外网IP"> </p><p>网页<a href="http://www.ip138.com/">www.ip138.com</a> 查询到的IP是：<em><strong>113.88.168.57</strong></em> </p><p><img src="ip_ask.jpg" alt="IP查询"> </p><p>这就表明我的网络没有公网IP。</p><h3 id="4-1-家里宽带有公网IP"><a href="#4-1-家里宽带有公网IP" class="headerlink" title="4.1 家里宽带有公网IP"></a>4.1 家里宽带有公网IP</h3><p>一般家里的网络拓扑图如下：</p><p><img src="net_no_ip.jpg" alt="家里宽带有公网IP"></p><p>内网设备访问互联网，先经过路由器的公网IP，路由器在获取光猫的公网IP，通过光猫的公网IP访问外面的互联网。因此，内网设备可以主动访问外面的互联网；但是反过来就不行。也就是外网设备无法主动访问内网设备，因为他们没有公网IP,无法被主动找到。</p><p>上面的拓扑图中，路由器直接获取公网IP访问互联网，我们可以通过路由器设置端口，实现 <em><strong>公网IP+端口</strong></em>号的形式访问家里的设备 。这是最廉价的方案，机会没有成本。但随着IPv4资源减少，IPv6普及以前，外网IP肯定越来越少，所以我们访问内网设备需要做内网穿透。</p><h3 id="4-2-家里宽带无公网IP"><a href="#4-2-家里宽带无公网IP" class="headerlink" title="4.2 家里宽带无公网IP"></a>4.2 家里宽带无公网IP</h3><p>网络拓扑图如下：</p><p><img src="net_ip.jpg" alt="无公网IP"> </p><p>上面拓扑图中，由于路由器获取的是电信内网IP，不是公网IP，无法直接访问互联网。下面主要介绍内网穿透的两种方案：</p><ul><li>frp内网穿透</li><li>花生壳软件</li></ul><p>他们的原理类似,需要有一台公网IP的服务器，通过服务器做数据转发。</p><p><img src="net_frp.jpg" alt="穿透原理"> </p><h4 id="4-2-1-frp内网穿透"><a href="#4-2-1-frp内网穿透" class="headerlink" title="4.2.1  frp内网穿透"></a>4.2.1  frp内网穿透</h4><p>所需要的条件：一台VPS</p><p>frp项目在GitHub地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a> </p><p>下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a> </p><h4 id="4-2-2-花生壳软件"><a href="#4-2-2-花生壳软件" class="headerlink" title="4.2.2 花生壳软件"></a>4.2.2 花生壳软件</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ARM </tag>
            
            <tag> MJPG-Streamer </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搭建单片机开发环境</title>
      <link href="/2021/10/30/linux-xia-da-jian-dan-pian-ji-kai-fa-huan-jing/"/>
      <url>/2021/10/30/linux-xia-da-jian-dan-pian-ji-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>接下来以STM43F429IGT6为例子进行说明。</p><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><ul><li><p>arm-none-eabi-gcc 下载 ：<a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads</a></p></li><li><p>GitHub上ST官方库：<a href="https://github.com/STMicroelectronics/STM32CubeF4">https://github.com/STMicroelectronics/STM32CubeF4</a></p></li></ul><h2 id="建立文件夹"><a href="#建立文件夹" class="headerlink" title="建立文件夹"></a>建立文件夹</h2><p>创建文件夹如下图所示</p><p><img src="image/file1.jpg" title="创建文件夹"> </p><ul><li>drivers：存放我们自己写的驱动，如led等</li><li>obj：存放编译产生的.o文件</li><li>stlib：存放官方库文件</li><li>user：存放main文件</li><li>jlink.cfg：JLink下载时的配置文件</li><li>Makefile：使用make编译代码</li></ul><p>重点介绍stlib文件夹</p><p><img src="image/file_stlib.jpg"> </p><ul><li><p>cminc：存放 <strong>STM32CubeF4\Drivers\CMSIS\Include</strong> 路劲下的头文件</p></li><li><p>inc：存放 <strong>STM32CubeF4\Drivers\STM32F4xx_HAL_Driver\Inc</strong> 下面的头文件</p></li><li><p>src：存放 <strong>STM32CubeF4\Drivers\STM32F4xx_HAL_Driver\Src</strong> 下面的库文件</p></li><li><p>startup_stm32f429xx.S：位置路径 <strong>STM32CubeF4\Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates\gcc</strong> 并将后缀小写的 <strong>s</strong> 改为大写</p></li><li><p>将<strong>STM32CubeF4\Drivers\CMSIS\Device\ST\STM32F4xx\Source\Templates</strong>  下面的 <strong>system_stm32f4xx.c</strong>  ,以及 <strong>STM32CubeF4\Drivers\CMSIS\Device\ST\STM32F4xx\Include</strong>  下面的 <strong>stm32f4xx.h</strong> ，<strong>stm32f429xx.h</strong> ，<strong>system_stm32f4xx.h</strong> 文件复制出来</p></li><li><p>找到 <strong>STM32CubeF4\Projects\STM32F429I-Discovery\Templates\SW4STM32\STM32F429I_DISCO</strong> 下面的 <strong>STM32F429ZITx_FLASH.ld</strong> 文件，以及 <strong>STM32CubeF4\Projects\STM32F429I-Discovery\Templates\Inc</strong> 里面的 <strong>stm32f4xx_hal_conf.h</strong> 文件</p></li></ul><p>至此，所必须的文件全部找到</p><p>如下图：</p><p><img src="image/cminc.jpg" title="cminc文件"> </p><p><img src="image/inc.jpg" title="头文件"> </p><p><img src="image/src.jpg" title="源文件"> </p><p>另外，inc和src里面的文件根据实际情况添加，这里只添加了常用的部分。</p><h2 id="修改的地方"><a href="#修改的地方" class="headerlink" title="修改的地方"></a>修改的地方</h2><p>将原来启动文件的小写的s改为大写，否则后面编译回报错；</p><p>目标文件是STM32F429IGT6，这和官方库STM32F429I_DISCO很接近，所以这里选择STM32F429ZITx_FLASH.ld链接文件，需要修改的地方如下：</p><p><img src="image/ld_config.jpg" title="链接脚本文件修改"> </p><p>上面的FLASH和RAM大小通过芯片手册可以查询，修改为对应芯片即可。比如，STM32F429IGT6的flash大小是1M,RAM大小是256K（192K RAM+64K CCMRAM）</p><h2 id="编写Makefile"><a href="#编写Makefile" class="headerlink" title="编写Makefile"></a>编写Makefile</h2><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># STM32 MCU Makefile</span>CROSS_COMPILE <span class="token operator">:=</span> arm-none-eabi-CC<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CROSS_COMPILE<span class="token punctuation">)</span>gccCPP<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CROSS_COMPILE<span class="token punctuation">)</span>g++LD<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CROSS_COMPILE<span class="token punctuation">)</span>ldAR<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CROSS_COMPILE<span class="token punctuation">)</span>arOBJCOPY<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CROSS_COMPILE<span class="token punctuation">)</span>objcopyOBJDUMP<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CROSS_COMPILE<span class="token punctuation">)</span>objdumpSIZE<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>CROSS_COMPILE<span class="token punctuation">)</span>size <span class="token comment">#设置全局变量</span><span class="token comment">#固件库全局变量定义</span><span class="token comment">#DEFS := -DUSE_STDPERIPH_DRIVER </span><span class="token comment">#HAL库全局变量定义</span>DEFS <span class="token operator">:=</span> -DUSE_HAL_DRIVER -DSTM32F429xx<span class="token comment">#-DSTM32F429_439xx </span>TARGET <span class="token operator">:=</span> test<span class="token comment">#设置编译参数和编译选项</span>CFLAGS <span class="token operator">:=</span> -mcpu<span class="token operator">=</span>cortex-m4 -mthumb -Wall -Os -ffunction-sections -fdata-sectionsLDFLAGS <span class="token operator">:=</span> -mcpu<span class="token operator">=</span>cortex-m4 -mthumb -Wl,--gc-sections<span class="token comment">#添加文件路径</span>INCDIRS <span class="token operator">:=</span> stlib/cminc \stlib/inc \stlib/inc/Legacy \stlib \user \drivers/led \SRCDIRS <span class="token operator">:=</span> stlib \stlib/src \user \drivers/led \VPATH <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>SRCDIRS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>INCDIRS<span class="token punctuation">)</span> <span class="token comment">#链接头文件</span>INCLUDE <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %, -I %, <span class="token variable">$</span><span class="token punctuation">(</span>INCDIRS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#找到.S和.c文件</span>SFILES <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">foreach</span> dir, <span class="token variable">$</span><span class="token punctuation">(</span>SRCDIRS<span class="token punctuation">)</span>, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> <span class="token variable">$</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>/*.S<span class="token punctuation">)</span><span class="token punctuation">)</span>CFILES <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">foreach</span> dir, <span class="token variable">$</span><span class="token punctuation">(</span>SRCDIRS<span class="token punctuation">)</span>, <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> <span class="token variable">$</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span>/*.c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#去掉文件的路径</span>SFILENDIR <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>SFILES<span class="token punctuation">)</span><span class="token punctuation">)</span>CFILENDIR <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">notdir</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFILES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#将文件替换为.o文件</span>COBJS <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %, obj/%, <span class="token variable">$</span><span class="token punctuation">(</span>CFILENDIR<span class="token punctuation">:</span>.c<span class="token operator">=</span>.o<span class="token punctuation">)</span><span class="token punctuation">)</span>SOBJS <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %, obj/%, <span class="token variable">$</span><span class="token punctuation">(</span>SFILENDIR<span class="token punctuation">:</span>.S<span class="token operator">=</span>.o<span class="token punctuation">)</span><span class="token punctuation">)</span>OBJS <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>SOBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>COBJS<span class="token punctuation">)</span><span class="token comment">#头文件依赖</span>DEPS <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> obj/%, .%.d, <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span><span class="token punctuation">)</span>DEPS <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEPS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#.PHONY:all</span><span class="token symbol">all</span> <span class="token punctuation">:</span> start_recursive_build <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span><span class="token operator">@</span>echo <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span> has been build!<span class="token symbol">start_recursive_build</span><span class="token punctuation">:</span><span class="token operator">@</span>echo Hello<span class="token comment">#@make -C ./ -f $(TOPDIR)/Makefile.build</span><span class="token symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span><span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -Tstlib/STM32F429ZITx_FLASH.ld -o <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.elf <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span><span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -O binary -S <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.elf <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.bin<span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>SIZE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.elf<span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.elf &gt; <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.dis<span class="token comment">#判断一下，防止重复包含头文件</span><span class="token keyword">ifneq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>DEPS<span class="token punctuation">)</span>,<span class="token punctuation">)</span><span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEPS<span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token comment">#编译文件</span><span class="token symbol"><span class="token variable">$</span>(SOBJS)</span> <span class="token punctuation">:</span> obj/%.o <span class="token punctuation">:</span> %.S<span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>INCLUDE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEFS<span class="token punctuation">)</span> -c -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span> -MD -MF .<span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">notdir</span> <span class="token variable">$@</span><span class="token punctuation">)</span>.d<span class="token symbol"><span class="token variable">$</span>(COBJS)</span> <span class="token punctuation">:</span> obj/%.o <span class="token punctuation">:</span> %.c<span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>INCLUDE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>DEFS<span class="token punctuation">)</span> -c -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span> -MD -MF .<span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">notdir</span> <span class="token variable">$@</span><span class="token punctuation">)</span>.d<span class="token builtin">.PHONY</span><span class="token punctuation">:</span>clean<span class="token symbol">clean</span><span class="token punctuation">:</span><span class="token operator">@</span>rm -f *.o *.bin *.elf *.dis .*.d obj/*<span class="token builtin">.PHONY</span><span class="token punctuation">:</span>upload<span class="token symbol">upload</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span>.bin<span class="token operator">@</span>make all<span class="token operator">@</span>JLinkExe jlink.cfg<span class="token builtin">.PHONY</span><span class="token punctuation">:</span>mytest<span class="token symbol">mytest</span><span class="token punctuation">:</span><span class="token operator">@</span>echo INCLUDE<span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>INCLUDE<span class="token punctuation">)</span><span class="token operator">@</span>echo CFILENDIR<span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFILENDIR<span class="token punctuation">)</span><span class="token operator">@</span>echo SFILENDIR<span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>SFILENDIR<span class="token punctuation">)</span><span class="token operator">@</span>echo OBJS<span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述Makefile实现了头文件的依赖，可以解决在头文件中修改数据，不需要make clean，直接make即可。</p><h2 id="编写main文件"><a href="#编写main文件" class="headerlink" title="编写main文件"></a>编写main文件</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f4xx.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f4xx_syscfg.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f4xx_gpio.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HAL库的添加.c和.h文件的玩法，都是通过 <strong>stm32f4xx_hal_conf.h</strong> 文件配置，如果编译报错，根据实际添加的情况修改。</p><p>在Linux下make就可以编译，最后可以生成一个test.bin文件。</p><p>JLINK下载的配置文件<strong>jlink.cfg</strong> ：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">device stm32f429igrheraseloadbin <span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>bin<span class="token punctuation">,</span><span class="token number">0x08000000</span>gexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要下载，先在Linux下安装JLink，在有JLink驱动的情况下，可以使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">make upload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载程序。注意Makefile中的TARGET和jlink.cfg文件中bin文件名字要一致。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ARM </tag>
            
            <tag> STM32F429IGT6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2021/10/25/markdown-yu-fa/"/>
      <url>/2021/10/25/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my blog  </p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li><p>插入内部图片</p><p><img src="ayst.jpg">  </p></li><li><p>插入外部图片</p></li></ul><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="baidu" title="百度网站"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> Linux </tag>
            
            <tag> Learn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
